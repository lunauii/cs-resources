[[{"l":"CS Resources","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","A resource for all things Computer Science for the British Columbia Institution of Technology (BCIT) Computer System Technology Dipolma (CST) program and other CS-related programs at BCIT.","Made by CST students, for CST students; this site aims at providing up to date resources on things in CST such as student-made notes, instructor details, and other key information needed for CST.","While this database is aimed towards CST students, this site can also be used by other CS program students or anyone wanting to learn computer science! We hope that this website helps with your CS needs. ❤️"]}],[{"l":"Contributing","p":["This page is a stub. Feel free to help contribute by creating a pull request!","Reason: currently missing Editing Guidelines section Latest Update: 09 January 2025"]},{"l":"Basics"},{"l":"Pre-requisites","p":["Ensure that before contributing, you have basic knowledge of the git CLI tool as well as are semi-familiar GitHub.","An IDE or text editor is not needed due to the wiki being editable in the development build, but can be used if you want a wide overview of the code or just prefer coding in one in general.","Visual Studio Code ( https://code.visualstudio.com/)","Brackets ( https://brackets.io/)","JetBrains WebStorm ( https://www.jetbrains.com/webstorm/)","You must also have the retypeapp package installed. Instructions are provided on Retype's Quick Start guide.","You can contribute to the source code without retypeapp. However, you will not be able to see a live preview of your code on a page."]},{"l":"Forking","p":["To begin helping out, you must first fork lunaui/bcit-resources on GitHub and create a remote instance of it on your machine. Leave the repository name the same as-is, unless you want to fork it for other purposes.","To fork this project, go to the repository on GitHub and press the button near the top-right of the page.","Navigate to that repository and take note of the URL, you will need it for the next section."]},{"l":"Cloning","p":["Clone the repository into a location of your choosing and then change directories to it. For demonstration purposes, I am going to be cloning the bcit-resources folder into the user's Documents folder.","Replace lunaui with your Github username, and usr with your machine's user's name."]},{"l":"Testing and Editing","p":["To see a live preview of the page while the code is being edited, run the following command while still in the git directory:","A localhost server of the development build will be opened, allowing you to see changes in real time.","While serving the page this way, you can either directly edit the files with the button on the top right of any given article while in the development build, or you can edit the files with an IDE or text editor.","Both solutions are, at baseline, functionally identical."]},{"l":"Pull Requests","p":["In order to save the changes to this website and not just the copy you have on your machine, you will have to create and send a pull request.","To do this, first ensure all your changes have been pushed already.","It is recommended to commit your changes frequently and often before pushing instead of dumping your push into one massive commit.","Go to your repository on github. You should see a button above the file list called .","Create a pull request with a meaningful title and description describing what you have changed with your commits. After that, create the pull request with the corresponding button.","If your changes get approved (it probably will), you will see your changes on the website take effect!","If you are a regular contributor or have made guides in the past for CST, ask me on Discord ( lunaui) for Collaborator access to the repository so that you can bypass me needing to approve your pull requests or even approve other's pull requests yourself!"]},{"l":"Editing guidelines","p":["TODO: cover discrepancies between BBY and DTC"]}],[{"l":"Crescent Difficulty Index","p":["The information on this page is largely based on opinion. It may not fully reflect each individual's opinions and is just a genearlization.","The Crescent Difficulty Index(CDI) is an informal unit of measuring a course's difficulty based on 3 factors."]},{"l":"Factors"},{"i":"load-55","l":"Load (55%)","p":["This factor is influenced by how often and clustered coursework such as quizzes, labs, assignments, and projects are as well as how long it averagely takes to complete them. It also takes into account how much of the textbook you need to study in order outside of lectures in order to succeed in quizzes and tests. For group projects, it is also determined by how often each group member needs to spend on it per week. It is the highest weighted factor of the three."]},{"i":"complexity-30","l":"Complexity (30%)","p":["This factor is influenced by how difficult the material in a course is relative to a student without prior experience in the field, as well as how difficult the topic is in general."]},{"i":"strain-15","l":"Strain (15%)","p":["This factor is mostly based on the public opinion of the instructor, the quality of the lectures/labs relative to how much you need to study it outside of them, and the clarity of instructions as a whole. The length of a lecture also affects Strain for lectures that go over 1h50m. This factor has the least weight due to its high variability."]},{"l":"Grades","p":["After considering all these factors, grades are then given based on how much the factors are present."]},{"i":"crescent-moon","l":":crescent_moon:","p":["CDI","Least Concern. Courses in this CDI category are usually pass or fail courses, or courses that are incredibly easy."]},{"i":"crescent-moon-crescent-moon","l":":crescent_moon::crescent_moon:","p":["CDI","Safe Courses in this CDI category are usually relatively easy classes and/or have amazing professors."]},{"i":"crescent-moon-crescent-moon-crescent-moon","l":":crescent_moon::crescent_moon::crescent_moon:","p":["CDI","Normal Courses in this CDI category are of average difficulty, having moderate workload and study requirements."]},{"i":"crescent-moon-crescent-moon-crescent-moon-crescent-moon","l":":crescent_moon::crescent_moon::crescent_moon::crescent_moon:","p":["CDI","Tough Courses in this CDI category have higher than average difficulty, either having more complex topics or heavier workload than the previous ones."]},{"i":"crescent-moon-crescent-moon-crescent-moon-crescent-moon-crescent-moon","l":":crescent_moon::crescent_moon::crescent_moon::crescent_moon::crescent_moon:","p":["CDI","High Priority Courses in this CDI category are infamously hard classes relative to the term, being deeply complex in nature, requiring large amounts of time dedicated to it, or both. A rough professor usually doesn't propel a course into this category, but it can be a pivoting factor."]}],[{"l":"Business Communications 1"},{"i":"badge-variant-ghost-text-n-a-cdi","l":"? | [!badge variant=\"ghost\" text=\"N/A\"] CDI","p":["...what?"]},{"l":"Instructor Specifics","p":["^1 You must have an average of 50% between these two exams to pass this class.","10%","15%","20%","20%^1","25%^1","30%","5%","Analytical Report","Attendance & professionalism","Criterion","Email assignment","Email: frank_schnurr@bcit.ca Office Location: SW2-262 Office Hours: Monday 9:30-10:20 & 12:30-1:20","Email: matthew_rockall@bcit.ca Office Location: SW2-258 Office Hours: I'll be available for virtual office hours at various times as needed. For in-person meetings, I can make myself available on Mondays or Tuesdays at the BCIT Downtown Campus (DTC) and on Tuesdays and Wednesdays in Burnaby. However, I do travel between the DTC and Burnaby campuses so please email to arrange an appointment or to let me know you'd like to see me.","Email: thorsten_ewald@bcit.ca Office Location: SW2-262 Office Hours: Mon: 11:30 – 1:20 Tues: 11:30 – 1:20 Fri.: 12:30 – 3:20 or by appointment; I am available via email pretty much all the time.","Final Exam","Friday 12:30-1:20","In-class Revisions","Informal Report","Midterm Exam","Multiple Choice Questions","Oral Presentation","Participation","Quizzes","Routine Request Assignment","Short Report Assignment","Thursday 11:30-1:20","Up to date as of Winter 2025.","Weight","Writing in the Technical Fields 3rd edition. Oxford University Press by Thorsten Ewald, ISBN-13: 978-0-19-903685-1"]},{"l":"Course Description","p":["Information technology professionals spend time each day communicating orally and in writing with their supervisors, colleagues and clients. As problem-solvers and entrepreneurs in industry, you need to communicate quickly, clearly, and effectively. This course will teach you how to be a professional and efficient communicator at work. You will write effective business correspondence and instructions and deliver a formal oral presentation to your set. The first term establishes the principles and basic patterns on which you will build more advanced applications in the second term."]}],[{"i":"chapter-1-technical-writing","l":"Chapter 1: Technical Writing","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"i":"chapter-2-technical-sentences","l":"Chapter 2: Technical Sentences","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"i":"chapter-3-technical-paragraphs","l":"Chapter 3: Technical Paragraphs","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"i":"chapter-4-parallelism-lists-heading-and-layout","l":"Chapter 4: Parallelism, Lists, Heading, and Layout","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"i":"chapter-5-emails-letters-and-memos","l":"Chapter 5: Emails, Letters, and Memos","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"l":"Applied Mathematics"},{"i":"badge-variant-ghost-text-n-a-cdi","l":"? | [!badge variant=\"ghost\" text=\"N/A\"] CDI","p":["...what?"]},{"l":"Instructor Specifics","p":["^1 Assignments, weighted 8% each.","10%","18%","20%","22%","25%","30%","35%","40%","A scientific calculator (with logarithmic, exponential and base conversion functions). Recommended: SHARP Advanced D.A.L EL-520 or 546 (it has cool solver features). SHARP 531 is a less ideal alternative since it does not have solver but otherwise works well for this course. If you have another calculator that you are comfortable using, you may use that instead of the recommended calculator.","Assignments","Criterion","Email: khajikolaei@bcit.ca Office Location: DTC-617 Office Hours: Tuesdays (11:30-12:30), Thursdays (11:30-12:30, 16:30-17:30), Fridays (15:30-16:30)","Email: simin_jolfaee@bcit.ca Office Location: N/A Office Hours: N/A","Final Exam","Lecture Notes to Accompany COMP 1113 by Goran Ruzic, available for purchase at the Burnaby bookstore during the first week of classes.","Midterm Exam","Mobius Access code, available for purchase from Burnaby bookstore during the first week of classes.","Quizzes","Recommended Text: Introductory Mathematics for Computer Science, Custom edition for BCIT, Mirela Gutica","Required: A scientific calculator (with logarithmic, exponential and trigonometric functions).","Up to date as of Winter 2025.","Weight"]},{"l":"Course Description","p":["Comp 1113 is partially discrete mathematics, partially an introduction to linear equations. The purpose of this course is to give a strong foundation for future technical and programming courses. The course is divided into three parts: (1) Boolean algebra and design of logic circuits; (2) number systems and data representation; and (3) functions, linear equations, vectors and matrices."]}],[{"l":"Placeholder","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","hardest class EVER"]}],[{"l":"Programming Methods"},{"i":"badge-variant-ghost-text-n-a-cdi","l":"? | [!badge variant=\"ghost\" text=\"N/A\"] CDI","p":["...what?"]},{"l":"Instructor Specifics","p":["^1 Assignments, weighted 8% each.","^1 To pass the course, average of midterm and final exams must be 50% or higher.","10%","15%","16%","24%^1","25%","40%","5%","Assignments","Criterion","Email: bruce_link@bcit.ca Office Location: SW2-365 Office Hours: On Learning Hub","Email: nabil_alrousan@bcit.ca Office Location: DTC-617 Office Hours: Mondays, 2:00–2:50 PM, at the TECH Hub Area, 5th Floor, DTC. Additional availability by appointment through video conferencing.","Final Exam","Java Software Solutions: Foundations of Program Design, Lewis and Loftus, Ninth Edition, Addison-Wesley, 2017, ISBN-13 9780134462028. Later editions are also acceptable.","Labs","Labs/Quizzes","Midterm Exam","Participation","Quizzes","Ramalho, Luciano. (2022). Fluent Python: Clear, Concise, and Effective Programming 2nd Edition. O'Reilly.","Slatkin, Brett. (2020). Effective Python 2nd Edition. Addison-Wesley. Various. (Ongoing). The Hitchhiker’s Guide to Python available at https://docs.python-guide.org/","Up to date as of Winter 2025.","Weight"]},{"l":"Course Description","p":["This hands-on course is the foundation for all future programming courses and complements COMP 1537 and COMP 1800. This course introduces the fundamental concepts of programming including design, development, testing, debugging simple programs, as well as error-handling, and problem solving."]}],[{"i":"chapter-1-introduction","l":"Chapter 1: Introduction","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"i":"chapter-2-data-and-expressions","l":"Chapter 2: Data and Expressions","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"i":"chapter-3-using-classes-and-objects","l":"Chapter 3: Using Classes and Objects","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"i":"chapter-4-writing-classes","l":"Chapter 4: Writing Classes","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"i":"chapter-5-conditionals-and-loops","l":"Chapter 5: Conditionals and Loops","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"l":"Web Development 1"},{"i":"badge-variant-ghost-text-n-a-cdi","l":"? | [!badge variant=\"ghost\" text=\"N/A\"] CDI","p":["...what?"]},{"l":"Relevant Links","p":["MDN Web Docs","freecodecamp.org","CSS Grid Garden"]},{"l":"Instructor Specifics","p":["^1 To pass the course, average of midterm and final exams must be 50% or higher.","10%","16%","20%^1","24%","25%","40%","40%^1","Assignments","Criterion","Email: aaron_ferguson@bcit.ca Office Location: SW2-124 Office Hours: On Learning Hub; via video conferencing","Email: nabil_alrousan@bcit.ca Office Location: DTC-617 Office Hours: Mondays, 2:00–2:50 PM, at the TECH Hub Area, 5th Floor, DTC. Additional availability by appointment through video conferencing.","Final Exam","Labs","Midterm Exam","None.","Quizzes","Up to date as of Winter 2025.","Weight"]},{"l":"Course Description","p":["This course focuses on programming both front and back end for web application development using JavaScript on both front-end and back-end development. Topics include AJAX, DOM editing with JavaScript & jQuery, and JSON."]}],[{"l":"MDN CSS Notes","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"l":"MDN HTML Notes","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"l":"Business Analysis and System Design"},{"i":"badge-variant-ghost-text-n-a-cdi","l":"? | [!badge variant=\"ghost\" text=\"N/A\"] CDI","p":["...what?"]},{"l":"Relevant Links","p":["1712 Practice Quiz","Old Testament| New Testament [Notes from Fall 2024]"]},{"l":"Instructor Specifics","p":["Up to date as of Winter 2025.","Email: mkhezrzadeh@bcit.ca Office Location: SW2-363 Office Hours: On Learning Hub","Criterion","Weight","Activities","20%","Midterm Exam","40%^1","Final Exam","^1 Exams for this course are NOT cumulative. E.g.; The final only covers the second half of the course.","[Required](Dennis) Dennis, Alan, Barbara Wixom, Roberta Roth. Systems Analysis and Design, 8th Edition. Wiley, 2021.","Ryan Singer, Shape Up"]},{"l":"Course Description","p":["Business Analysis and Systems Design is the study of concepts, processes and tools that professionals use to plan and develop information systems to industry standards. Students learn how to ask implicit questions, to create and document communication plans and to make better decisions prior to creating a software system. Beginning with an introduction to the Software Development Life Cycle (SDLC), students work in teams to initiate the system process, analyze problems, discover requirements and create a logical design. Topics include: techniques used in the discovery of business requirements, traditional approaches to data and process modelling, entity-relationship diagrams, and an introduction to relational database normalization. Agile life cycles such as Scrum are also introduced and compared to more planned life cycles such as waterfall. By the end of this course, successful participants will be able to use tools and methods commonly used in industry to analyze, design, and implement information systems as confirmed by a term project."]}],[{"i":"chapter-1-the-systems-analyst-and-information-systems-development","l":"Chapter 1: The Systems Analyst and Information Systems Development","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"i":"chapter-2-project-selection-and-management","l":"Chapter 2: Project Selection and Management","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"i":"chapter-4-use-cases-and-process-models","l":"Chapter 4: Use Cases and Process Models","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"i":"chapter-13-agile-development-methods","l":"Chapter 13: Agile Development Methods","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"i":"#","p":["Study tips and what to look out for in each module."]},{"l":"Midterm guide"},{"l":"Study tips"},{"i":"wheres-the-lamb-sauce","l":"Where's the lamb sauce?"},{"l":"Primary sources","p":["Lecture slides","What Maryam said in lecture","Technically, only the primary sources are examinable. But the lectures can be (read: are) confusing, so you also need:"]},{"l":"Secondary sources","p":["Textbook","Chapter summaries","The textbook and chapter summaries can expand on and clarify concepts introduced in lectures(the latter is less detailed, but much easier to read). But there are also concepts not covered in the lecture at all, you don't need to know them. Sometimes Maryam disagrees with the authors, always go with Maryam's version."]},{"l":"Tertiary sources","p":["Shivaun's notes","COMP 1712 Bible(our intake's crowdsourced notes)","Shivaun's notes are consistently good, while the Bible's quality and writing style often vary.","Don't use these as your main sources, but as aids to get you started or when none of the higher-priority sources make sense. You don't learn much from reading someone else's notes."]},{"i":"so-how-do-you-learn","l":"So how do you learn?","p":["Take notes while you study the primary and secondary sources, try to summarize and explain concepts in your own words. Basically, create your own tertiary source.","Review lab solutions and similar problems in the textbook. The exam is very heavy with application-based questions.","Do the practice quiz: https://quiz.comp1712.ca Don't memorize the answers, but understand why they are correct.","The exam questions do NOT come from the practice quiz bank!","Use the quiz as a knowledge check, not to grind to memorize all questions, there's no point. 90% is good enough. Once you've gone through all questions, switch focus to other methods.","The quiz bank comes from the textbook publisher, so it's also a secondary source. Treat it with caution like I explained in that section."]},{"i":"to-cheat-or-not-to-cheat","l":"To cheat or not to cheat?","p":["You have 47 MCQs in 1 hour, you will not have time to look up your cheatsheet during the exam. The real \"cheatsheet\" is the knowledge you gain along the way! (of making it)","I recommend mostly stick to taking notes. Effectively your notes is your cheatsheet, but you don't have to write it in a tiny size, and even in a comfortable size you can probably type faster than handwriting, so you're saving lots of time and effort. You'll learn so much from the process of taking notes, it's more valuable than having a physical cheatsheet in the exam room.","That said, there are some truly tricky parts where a cheatsheet may be handy. I'll recommend what to include for each module in the review section."]},{"l":"An oversimplified review","p":["More like random things I remember about each module that may trip you, or some module-specific tips that may be useful. Absolutely NOT a comprehensive review of everything you should know.","The exam is heavily weighted torwards the later modules, so I'll go over them in reverse order."]},{"i":"module-6-entity-relationship-diagrams","l":"Module 6: Entity relationship diagrams","p":["1 many-to-many relationship","2 one-to-many relationships, with an intersection entity (Friendship)","An entity is like a class, attributes are like instance variables.","An identifier is an attribute or group of attributes that uniquely identifies a particular instance of the entity. For example with the Student entity, the student number can be the identifier. The social insurance number can also be the identifier. Or perhaps the combination of last name, first name, and date of birth (if you're sure the combination is unique for every student).","But each entity has ONLY ONE identifier, no exceptions! When designing an ERD, if there are multiple candidates for the identifier, you must choose one.","Conceptual questions","Consider copying 1 or 2 ERDs into your cheatsheet if you don't feel confident. Don't pick too complex ones so that you don't have to spend time deciphering them in the exam.","Does it really not matter? Who knows. It didn't come up in the last midterm. But if it does, go with Maryam's version.","For this module, doing the practice quiz helps but won't suffice. Review lab 6 solution and read the explanation of ERD in the textbook. Learning the syntax goes without saying, but the important part is the reason why a system is modeled a certain way.","Given a description of a system, identify the ERD that best models it.","Given a description of an entity, how many attributes do you need to model it?","In this module there is one point where Maryam disagrees with the textbook authors: the order by which you create ERD.","Prepare for these types of question (all questions are multiple choice, btw):","Screenshot from a lecture slide","Suppose you make Student's identifier the combination of last name + first name + dob. It does NOT mean this entity has multiple identifiers. Last name is not an identifier, first name is not an identifier, dob is not an identifier. Only the combination of them is the identifier.","The identifier of the intersection entity is usually the combination of the identifiers of the entities it's associated with. In this case, Friendship's identifier is Student1_ID + Student2_ID. But remember each entity has ONLY ONE identifier! Student1_ID and Student2_ID are identifiers of the Student entity, but they are not identifiers of the Friendship entity. Only their combination is the identifier of the Friendship entity.","When modelling a many-to-many relationship, it's best practice to break it into 2 one-to-many relationships."]},{"i":"module-5-data-flow-diagrams","l":"Module 5: Data flow diagrams","p":["And similarly, every process in the level 1 diagram has a level 2 diagram which further divides it into subprocesses.","Common DFD errors, figure 4-25, p. 154","Context diagram, figure 4-17, p. 145","Given a description of a system, identify the diagram that best models it.","Given a diagram, is it valid? If not, identify the error(s).","Given a higher-level diagram, identity the most correct lower-level diagram.","I recommend copying to your cheatsheet a level 0 diagram, a corresponding level 1 diagram, and figure 4-25. You don't need to understand the diagrams; what you want is examples of what's valid and what's not, so that you can compare them to what's given in the exam. So choose some complex ones to cast a wide net.","Level 0 diagram, figure 4-20, p. 148","Level 1 diagram, figure 4-23, p. 151","Prepare for these types of questions:","Review lab 5 solution and read all examples in the textbook of how to create DFDs to get a feel for them. Even if you can get 100% on the practice quiz in 5s while the screen is upside down, if you don't have the practical experience, you are screwed!","The area inside the blue boundary is Process 0 in the context diagram, only shown with more details. Every data flow in/out of Process 0 must correspond to a data flow in/out of this area. This act of keeping the higher and lower level diagrams in correspondence is called balancing.","The highest-level DFD is the context diagram, which has one process(representing the entire system) and all external entities that the system interacts with. No data stores.","The level 0 diagram is like you're zooming into the system process. You see the processes that compose the system process, and all the data stores. There are no extra external entities.","There are no data stores that the level 0 diagram doesn't have.","You can zoom into each process in the level 0 diagram to get a level 1 diagram. This is the level 1 diagram for Process 5, you can see its subprocesses:"]},{"i":"module-4-use-cases","l":"Module 4: Use cases","p":["For module 1-4 the questions are mostly conceptual. But the majority of questions in the exam are on module 5 and 6.","The actor in a use case can be anything that interacts with the system. It could be a person, a department, or a machine. If it's a person, rarely is it an individual person, but usually a collective noun for the role of the person in the system(e.g. \"customer\", \"store manager\").","Beware of this \"trap\" question:","It's false because the format and content of a use case vary by organization. Not all use cases follow this format, this is just the format that they teach you.","In general, if a question uses absolute terms like \"always\", \"never\", \"every\", it's likely false.","For this module, doing the practice quiz helps but won't suffice. Review lab 4 solution and read examples of use cases in the textbook to get a feel for them. Consider copying one to your cheatsheet if you don't feel confident."]},{"i":"module-3-requirements","l":"Module 3: Requirements","p":["One major source of confusion is what's the difference these two groups, and how they're related to each other.","Requirements elicitation techniques","vs","Requirements analysis strategies","Interview JAD Questionnaire Observation Document analysis","Problem analysis Root cause analysis Technology analysis Duration analysis Activity-based costing Informal benchmarking Outcome analysis Activity elimination","Elicitation techniques are the media by which you obtain info; analysis strategies are the types of info that you obtain. They go together as two different aspects of the requirements determination process.","For example, if your technique is questionnaire, you can ask participants to identify problems with the current system (problem analysis), how long it takes to do certain tasks (duration analysis), how much it costs (activity-based costing), etc.","Or, if you want to know how other organizations perform (informal benchmarking), you can do so by interviewing their people (interview), reading their documentation (document analysis), observing their work (observation), etc.","You don't choose either an elicitation technique or an analysis strategy. You choose among the elicitation techniques and among the analysis stratgies, and you do both.","The practice quiz should adequately teach you the differences among the elicitation techniques. But it has very few questions on the analysis strategies. IIRC the last midterm was heavier on the latter group, so make sure you study them from other sources.","Last midterm 4/47 questions came from the module 3 graded quiz. Review the questions you did wrong and share them on Discord so that everyone can learn.(Each student can only see questions they did wrong.)","No cheatsheet needed for this module."]},{"i":"module-2-methodologies","l":"Module 2: Methodologies","p":["A project often has both a time constraint (you must finish by ...) and a requirements constraint (you must implement ... features). If you must choose, time is more important, never release a project late! Missing features can be added in the next versions.","Do not use this table!","It's misleading because it gives you the impression that Waterfall is always bad and Throwaway is always good.","But it's usually a trade-off. Prototyping (either kind) is good with unclear user requirements because you build a prototype, ask your users to try it and give you feedback, then build the actual product. But if the requirements are already clear, why would you do that, you would actually waste everyone's time.","Waterfall is bad if you have unclear user requirements; but if the requirements are clear, then it doesn't matter.","Read the description of all methodologies, understand them, and apply them on a case-by-case basis. The practice quiz has many questions in the form of \"what is the best methodology if...\", do them to check your understanding (spoiler: throwaway is not the correct answer for everything). The COMP 1712 Bible has two improved versions of the methodology table, you may find them useful.","All that said, neither of the last 2 midterms had any questions about methodologies, so don't worry too much about this. No cheatsheet needed."]},{"i":"module-1-the-sdlc","l":"Module 1: The SDLC","p":["This table is your best friend throughout the term.","Figure 1-3, p. 9","It gives you a bird's-eye view of the course, how everything you learn fits into the entire picture. The content of the table may not be on the exam per se, but having a big picture understanding makes everything easier to digest.","Roles in a project:","Project sponsor: the person/department who initated the project and serves as the project's primary point of contact","Champion: the person who gives financial and political support to the project","The Sponsor and Champion are usually the same person, but they are technically distinct roles.","Don't worry about the cost-benefit analysis if you're bad at math. You won't have to do anything remotely close to that excel lab on the midterm. You need to understand the definitions(e.g. tangible vs intangible benefits, pay-back period, ROI), but no need to memorize the formulae or worry about the calculations.","Doing the practice quiz should suffice for this module. No cheatsheet needed."]}],[{"l":"COMP 1100","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]}],[{"l":"COMP 1800","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]}],[{"l":"Business Communications 2","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]},{"i":"badge-variant-success-text-2-9-cdi","l":":crescent_moon::crescent_moon::crescent_moon: | [!badge variant=\"success\" text=\"2.9\"] CDI","p":["...what?"]},{"l":"Course Description"}],[{"l":"Discrete Mathematics","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]},{"i":"badge-variant-success-text-3-2-cdi","l":":crescent_moon::crescent_moon::crescent_moon: | [!badge variant=\"success\" text=\"3.2\"] CDI","p":["...what?"]},{"l":"Course Description"}],[{"i":"lesson-1-rules-of-sum-and-product","l":"Lesson 1: Rules of Sum and Product","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]}],[{"i":"lesson-2-permutations","l":"Lesson 2: Permutations","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]}],[{"i":"lesson-3-combinations-no-repetitions","l":"Lesson 3: Combinations (No Repetitions)","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]}],[{"i":"lesson-4-combinations-repetions-allowed","l":"Lesson 4: Combinations (Repetions Allowed)","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]}],[{"l":"Gallery","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]}],[{"i":"lesson-5-logic","l":"Lesson 5: Logic","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]}],[{"i":"lesson-6-logical-implication","l":"Lesson 6: Logical Implication","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]}],[{"i":"lesson-7-logic-of-quantified-statements","l":"Lesson 7: Logic of Quantified Statements","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]}],[{"l":"Lesson 8","p":["Not Available This page is not available due to the lecture for this lesson not existing."]}],[{"l":"Gallery","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]}],[{"i":"lesson-9-intro-to-set-theory","l":"Lesson 9: Intro to Set Theory","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]}],[{"i":"lesson-10-relationship","l":"Lesson 10: Relationship","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]}],[{"l":"Gallery","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]}],[{"l":"Procedural Programming","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]},{"i":"badge-variant-success-text-3-0-cdi","l":":crescent_moon::crescent_moon::crescent_moon: | [!badge variant=\"success\" text=\"3.0\"] CDI","p":["...what?"]},{"l":"Course Description"}],[{"l":"Object Oriented Programming 1","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]},{"i":"badge-variant-warning-text-4-0-cdi","l":":crescent_moon::crescent_moon::crescent_moon::crescent_moon: | [!badge variant=\"warning\" text=\"4.0\"] CDI","p":["...what?"]},{"l":"Course Description"}],[{"i":"quiz-1-foundations","l":"Quiz 1: Foundations","p":["Define \"object\" (1/12)","What is wrong with the following code? Explain. Fix it. (1/12)","Solution: If s is null, it won't have the isBlank method. Fix: if (s==null || s.isBlank())","Create a Main class with the main() method and print out the third argument. (2/12)","Solution:","What does final mean? ive an example of a field that should be final for a Person class. (2/12)","Solution: Means the variable can only be assigned once. It's a compile error if you try to assign it the 2nd time. Example: a Person's date of birth.","Create a Restaurant class with two well-named instance variables: nationality (e.g. Italian), opening and closing hours (use a 24-hour clock), getters and setters as appropriate, and a constructor. With JavaDoc comments. Use proper validation techniques."]}],[{"i":"quiz-2-inheritance--polymorphism","l":"Quiz 2: Inheritance & Polymorphism","p":["Create a checked exception named InvalidUsernameException. Then create a Login class; Login has a username String variable and a password String variable. Its constructor must throw your new Exception if the username contains (in any letter casing) the word \"admin\". Then create a Main class: its main method creates a Login and prints its username and password. Show the best-practice way of doing this. (6/12)","I created a class named Rectangle with an instance variables for length and width. Show its default constructor; under what conditions is that constructor made by Java? Create a Square class that is a child of Rectangle too. (2/12)","Create a class Drink with instance data for name (a String). Create a child class CocaCola that also has a boolean for whether it is \"diet\" or not. Drink has a method calld display() that prints its data. CocaCola overrides it and prints its data. (4/12)"]}],[{"i":"quiz-3-abstract-and-final","l":"Quiz 3: Abstract and Final","p":["Define and give clear Java example of each of the following terms:","Final method (2/12)","Final class (2/12)","Abstract method (2/12)","Abstract class (2/12)","Solution:","a) A final method cannot be overrided by child classes. Make a method final when its implementation us critical to the class'es operation, so that child classes cannot mess it up.","Example:","b) A final class cannot be extended/inherited. Make a class final when logically there's no further subtype of it.`","c) MISSING","d) An abstract class cannot be instantiated. You must extend the class in order to create instances. An abstract class may, but doesn't have to, contain abstract methods.","Use abstract class when you want to factor out common code among other code in order to reduce code duplication, but the class itself doesn't make sense to be instantiated. For example, IPhone and IPad may have common code that can be reused, but \"IDevice\" is not a thing, so it shouldn't be instantiable.","Create an IPhone class overrides equals() so that IPhones of the same version (e.g. 16) are \"equal()\". Show all the code. Use best practices (but commit JavaDoc comments) **(4/12)","Solution: I don't have one, but remember that whenever you override equal(), you must override hashCode() as well."]}],[{"i":"quiz-4-interfaces","l":"Quiz 4: Interfaces","p":["Create two interfaces; one is called File; the other is Bank. Both have a concrete method called save(String) plus another method of your choosing. Bank just prints \"saved money to account number xyz\" (xyz is the argument; the String account number). The File save() prints \"saved fata to file xyz\" (the argument is a filename String). The create a class OnlineBankAccount that implements both interfaces. The OnlineBankAccount overrides the save() method to perform the Bank version. (7/8)","True or false: a class can implement multiple interfaces. (1/8)","Solution: True"]}],[{"i":"quiz-5-collections","l":"Quiz 5: Collections","p":["Create a class called Test. It has a main() method in which the following must happen. Create a HashMap of values: 1->\"one\", 2->\"two\", 3->\"three\", 4->\"four\", and 5->\"five\". Then create a set of map's keys, and use an iterator to print all the values that contain the letter \"o\". Also put those \"o\" values into an array called containsO. Then use a for-each loop to iterate through the array and add each value to an ArrayList called hasO. Use all of the best practices that we use in class (except JavaDocs) and make sure your code handles null values properly. (12/12)"]}],[{"i":"lesson-1-foundations","l":"Lesson 1: Foundations","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"i":"lesson-2-inheritance-polymorphism-exception-handling","l":"Lesson 2: Inheritance, Polymorphism, Exception Handling","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"i":"lesson-3-final-abstract","l":"Lesson 3: Final, Abstract","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"i":"lesson-4-interfaces","l":"Lesson 4: Interfaces","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"i":"lesson-5-collections-and-iterating","l":"Lesson 5: Collections and Iterating","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"l":"Lesson 6","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]}],[{"i":"lesson-7-functional-interfaces-lambda-expressions-method-references","l":"Lesson 7: Functional Interfaces, Lambda Expressions, Method References"},{"l":"Topics Covered","p":["Functional Interfaces","Lambda Expressions","Method References"]},{"l":"Functional Interfaces","p":["An interface which only has a single abstract method. Can have default and static methods.","Can declare with @FunctionalInterface(optional, but highly recommended for clarity)","Java automatically knows what types, parameters, and return type the interface implements due to there only being one abstract method. Due to this, @Override is not necessary and it can be implemented just by using a lambda expression.","See Java interface ConsumerT."]},{"l":"Lambda Expressions"},{"l":"Method References","p":["Method references are a shorthand syntax which can replace lambda expressions.","Method references use the :: operator without any parameters.","Class::staticMethod is an alternative to the lambda expression (args) - Class.staticMethod(args).","Can be used to make simple lambda expressions by making use of existing methods","Should be used over lambda expressions when there are more complex/repetitive tasks","Notice the :: in the examples."]}],[{"l":"Web Development 2","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]},{"i":"badge-variant-secondary-text-unknown","l":":icon-question: | [!badge variant=\"secondary\" text=\"UNKNOWN\"]","p":["...what?"]},{"l":"Course Description"}],[{"l":"Relational Database Systems","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]},{"i":"badge-variant-warning-text-3-7-cdi","l":":crescent_moon::crescent_moon::crescent_moon::crescent_moon: | [!badge variant=\"warning\" text=\"3.7\"] CDI","p":["...what?"]},{"l":"Course Description"}],[{"i":"computer-organizationarchitecture","l":"Computer Organization/Architecture","p":["More information is required for Downtown Campus. Please consider requesting a pull request to contribute!"]},{"i":"badge-variant-danger-text-4-2-cdi","l":":crescent_moon::crescent_moon::crescent_moon::crescent_moon::crescent_moon: | [!badge variant=\"danger\" text=\"4.2\"] CDI","p":["...what?"]},{"l":"Instructor Specifics","p":["Up to date as of Winter 2025.","Email: jason_wilder@bcit.ca Office Location: SW2-301 Course Outline: https://www.bcit.ca/outlines/20251072574/","Office Hours: By appointment (email jason_wilder@bcit.ca)","Criterion","Weight","Weekly quizzes in the labs","35%^1","Research presentations","15%","Midterm Exam","25%","Final Exam","^1 Quizzes can be retaken every other week up to a limit, with the most recent attempt determining the grade.","Email: ayesha_anzer@bcit.ca Office Location: Course Outline:","Office Hours:"]},{"l":"Course Description","p":["Computer organization is a fundamental topic for computer science students and for any future programmers. The course gives a good understanding of the computer hardware and how software is built on a specific hardware. The computer is regarded as a hierarchy of levels, each one performing some well-defined functions from the device level (hardware) to the problem-oriented language level. Each level is discussed and analyzed in detail.","Computer Organization/Architecture is an intensive introduction course that covers the foundations of hardware, networking, circuitry, and low level programming with Assembly.","Succeeding in this course requires you to memorize and understand diagrams, in addition to the underlying purpose of all the components covered."]}],[{"i":"chapter-1-introduction","l":"Chapter 1: Introduction"},{"l":"Terminology","p":["Bit- a binary digit","Byte- a group of 8 bits","Word- an fixed-size group of data","Used to be 32 bits, is now 64 bits","Dependent on the register size","Bus- an electrical line that transfers data between two devices Register- a component that stores data in the CPU","Higher Level Language- Language that's relatively higher in the computer architecture Lower Level Language- Language that's relatively lower in the computer architecture","CPU- Central Processing Unit","Invented by von Neumann","Continuously does the “fetch-decode-execute” cycle","FDE- Fetch, Decode, Execute","The instructions are “fetched” from RAM","They're then decoded so the CPU knows what to do","They're then executed","RAM(aka main memory) - the memory of the computer"]},{"l":"Logarithms and Powers of 2","p":["-10","-12","-15","-18","-20","-21","-24","-3","-30","-40","-50","-6","-60","-70","-80","-9","10","10 n","12","15","18","2 n","20","21","24","3","30","40","50","6","60","70","80","9","a","atto","E","exa","f","femto","G","giga","k","kilo","m","mega","micro","milli","n","nano","p","peta","pico","Prefix","Signifier","T","tera","We probably won't see too much of anything above tera- or below pico-, but it's good knowledge to know anyways.","Y","yocto","yotta","Z","zepto","zetta","μ"]},{"l":"Computer Architecture Layers","p":["5 - Problem-Oriented Language Level↓ Translation (compilation) to assembly 4 - Assembly Language Level↓ Translation (assembly) 3 - Operating System Language Level↓ Interpretation (OS) 2 - Instruction Set Language Level↓ Interpretation (microprograms) or direct execution 1 - Microarchitecture Level↓ Hardware 0 - Digital Logic Level","image"]},{"l":"Translation and Interpretation","p":["In order to convert between different language levels, we need to first convert the instructions between different layers.","This process can usually only go down the layers, not up","Translation is the process of converting a program from one HLL to its equivalent program in an LLL","Converting an HLL program is done all at once","After doing so, the HLL program isn't needed anymore","Interpretation is the process of converting an instruction from one HLL to its equivalent set of instructions in an LLL","Converting an HLL program is done one instruction at a time"]},{"l":"Notes","p":["The Digital Logic Level is the only hardware level","All other levels are software","Compilation can only go down to assembly level","Multi-layered computers are a modular system","If you want to replace a level, you just need to also replace the conversions between its higher and lower levels","When compiling and running a program, we end up with six different versions of the same program, each in a different language"]},{"l":"Patterns From Highest to Lowest Level","p":["Easiest to hardest to understand (for humans)","Hardest to easiest to understand (for computers)","Most to least powerful instructions","Flexible to rigid","Easiest to hardest to execute a high-level instruction","Least to most amount of instructions","Smallest to largest files to execute","Slowest to fastest levels","Most to least conversions to get to the lowest level"]},{"l":"Week 1 Question"},{"i":"q4","l":"Q4.","p":["\\frac{n}{m} * \\frac{n}{m} * k(\\frac{n}{m})^2 * k","\\frac{n}{m} * k","\\frac{n}{m} * n * k","\\frac{n}{m}^{r - 1} * k","1 level- r instruction can do the work of m level-( r - 1) instructions","1 level- r instruction gets converted into n level-( r - 1) instructions after interpretation","A level-1 program takes k seconds to run.","A level-2 instruction first has to be converted into level-1 instructions before being executed.","A level-2 program takes \\frac{n}{m} * k seconds to run.","A level-3 instruction first has to be converted into n level-2 instructions before being executed.","Consider a multilevel computer in which all the levels are different. Each level has instructions that are m times as powerful as those of the level below it; that is, one level r instruction can do the work of m level r − 1 instructions. If a level-1 program requires k seconds to run, how long would equivalent programs take at levels 2, 3, and 4, assuming n level r instructions are required to interpret a single r + 1 instruction?","Given four variables, r, m, n, k:","k","n * k","Notice that, for a level-3 program, the degree of \\frac{n}{m} is equal to 2. For a level-2 program, the degree of \\frac{n}{m} is equal to 1. We can generalize this to say that for a level- r program, the degree of \\frac{n}{m} is equal to r - 1.","Now, let's calculate how long a level-2 program takes.","One level-2 instruction gets converted into n level-1 instructions.","One level-2 program will take (\\frac{n}{m})^2 * k seconds to run.","One level-2 program will take \\frac{n}{m} * k seconds to run.","r= an arbitrary level in the computer k= the amount of seconds for a level-1 program to run m= the power factor of a level's instructions n= the amount of level r - 1 instructions required to interpret a level- r instruction","The execution of these instructions then gets sped up by our power factor, m.","The first step is to define all the variables in the question. From there, we can figure out how to solve it.","This is how we get the formula!","We can use the same logic to calculate how long a level-3 program takes."]}],[{"i":"#","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]},{"i":"chapter-2-data-paths-and-pipelining","l":"Chapter 2: Data Paths and Pipelining"},{"l":"Terminology","p":["(Officially, the MIPS processor stands for Microprocessor without Interlocked Pipeline Stages)","ALU- Arithmetic Logic Unit","Bandwidth- the rate at which instructions are finished","Clock Cycle- The interval between the rising edges of the clock","Clock- Something that can be turned on and off","Frequency- the amount of clock cycles per second, measured in Hertz","Instruction Register- special register in the CPU that stores an instruction to be decoded and executed","Interpreter- A software program that FDE's the instructions of a program, a language level down","Latency- the total time it takes for a single instruction to finish","MIPS- M illions of I nstructions P er S econd","Parallelism- Being able to work on several instructions in the same stage at the same time","Period- the time taken per clock cycle","Pipelining- The process of splitting the FDE process into separate stages, allowing for multiple instructions to be worked on at once","Principle of Spatial Locality- Words with numerically similar addresses (ex: 6000, 6001) tend to be stored physically close to each other","Principle of Temporal Locality- Words requested by the CPU are likely to be requested again in the near future","Program Counter- Special register in the CPU that stores the address of the next instruction to be fetched","Represents how fast a processor can begin instructions","RISC- Reduced Instruction Set Computer CISC- Complex Instruction Set Computer","UNRELATED TO LATENCY!"]},{"l":"Clock Speed and Frequency","p":["A 1 GHz CPU has 1 billion rising/falling edges per second 1 rising edge per 1/1 billion seconds = 1 nanosecond","A clock cycle is the interval between the rising edges of the clock (on, off, on again).","A clock is anything that can be turned on and off.","A diagram of a clock.","Analogy: Imagine a bus. People at a bus stop can only board that bus every time a bus arrives at that stop.","But that's not the main concern when we want to make an efficient CPU. What doesn’t matter today is how long an instruction takes (the latency), or how often you can start them (the clock speed). What matters is the speed at which an instruction is finished (the bandwidth).","Clocks are involved in almost every component of a computer. Every clock cycle, that component can execute one action (ex: transfer data from RAM to CPU, decode instruction). The CPU can start an instruction each clock cycle.","Ex:","Frequency = 100MHz Period = 1/100M = 0.00000001 s = 10 nanoseconds","In computers, this is usually an electronic component that turns \"on\" when receiving","Inverse of frequency\\","Measured in Hertz (Ex: 100MHz)","Measured in time units","One clock cycle is rising edge to rising edge","Parallelism ties in with this later!","The \"on/off\" cycle tends to be a regular cycle in computers, called the clock cycle.","The clock cycle's usually quite fast in computers - 100 million cycles per second","The frequency of a clock (or the clock speed) is how many clock cycles happen per second","The period of a clock is how much time passes between clock cycles","This doesn’t mean we can finish an instruction each clock cycle - usually, finishing an instruction takes much longer than a single clock cycle."]},{"l":"The Von Neumann Datapath","p":["The Von Neumann data path. Taken from Andrew S. Tanenbaum - Structured Computer Organization.","The lines are buses(electrical lines)","The boxes are registers(CPU memory - can store one word)","The big box has a lot of registers","Some registers have names and specific functions","A computer has only a few dozen registers. You don’t need that many for a good CPU, though; the registers just need to be constantly running."]},{"l":"Special Registers","p":["There are two special registers in the CPU;","the program counter(PC), which stores the main memory address of the next instruction to be fetched, and","the instruction register(IR), which stores an instruction to be decoded and executed."]},{"l":"The Datapath Process","p":["There are five steps to the Von Neumann data path:","The CPU fetches the address (outside of the CPU) from the Program Counter, and gets it transferred from memory using buses Program Counter is updated with the next instruction’s address","The CPU decodes the instruction","The CPU grabs operands from the its registers and then transfers them to the input registers of the ALU","The ALU executes the instruction by taking in the input registers' values, modifying them accordingly, and sendind the output to the output register","The final value either gets sent into a register for use in the near future, or sent into RAM to be stored for later use","Eventually, everything goes back to the hard drive","The fetch-decode-execute cycle.","You should note that the slowest part of the FDE cycle is the fetching part, or getting instructions and data from memory. To speed that process up, you just need to prefetch those instructions.","Programs run fast when:","They’re constantly being provided data (so their registers are full)","They can predict what that data is (so that they don't always have to keep going to main memory)","Cache is related to this!","You may also notice that each step is executed by a separate unit. This ties into pipelining later, but hold on for a second."]},{"i":"the-instruction-execution-wishlist","l":"The Instruction Execution \"Wishlist\"","p":["There are many parts of the FDE cycle computer architects wish they could optimize. There are also reasons why they can't.","Wish","Flaws","All instructions are directly executed by hardware, as hardware runs significantly faster than software (remember the multilevel computer diagram?)","Complex and expensive, plus some instructions are too complicated and should be executed by hardware (ex: connecting to MySQL)","Instructions are issued as fast/often as possible","Complex and expensive, plus has physical limits on the hardware (wires can only get so close to each other before they start affecting each other)","Instructions are easy to decode, preferably by making them all the same size","Long instructions can't be compressed into the same data size as short instructions, plus this idea goes against backwards compatibility (ex: decoding instructions from the 80's)","Only LOAD and STORE instructions reference main memory","Referencing main memory is inevitable (ex: adding two values from main memory)","The CPU's immediate memory stash is expanded by adding more registers","Expensive, power consumptive, and impractical (stored instructions might become outdated by the time they're referenced)"]},{"l":"RISC vs. CISC Architectures","p":["Reduced instruction set computers(RISC) involve fewer and simpler instructions. (ex: 3 + 3 + 3 + 3 + 3) Complex instruction set computers(CISC) involve more and more complicated instructions. (ex: 3 x 5)","The idea behind CISC architectures is that by implementing all common instructions directly in hardware (regardless of complexity), the CPU doesn't have to interpret as many instructions.","Computers today are mostly RISC, with a bit of CISC."]},{"l":"Cache","p":["Jason uses a stomach-fridge-store analogy for cache. I'm going to steal it.","Imagine the CPU's registers are its stomach. Also imagine that the main memory of the computer is a Costco. The Costco is pretty far from the CPU's house, and so it wants to minimize the time it takes to get groceries from there to its stomach. Luckily for it, there's a third party it isn't aware of called the cache!","Whenever the CPU sends an instruction to fetch a word from main memory, the cache intercepts that instruction and sees if it already has the data the CPU wants. If it does, then it sends that word to the CPU instead of taking the long trip to main memory Costco. If not, then it goes to main memory itself, fetches a whole block of instructions near the word the CPU wants, then stores it in a fridge for the CPU. Then, it sends back the word the CPU requested.","The cache exists to try to reduce the amount of times the CPU has to get a word all the way from main memory. The less times it has to go to Costco, the faster the program runs. Storing blocks of words at a time takes advantage of two principles of locality: the principle of spatial locality and the principle of temporal locality."]},{"l":"Principle of Spatial Locality","p":["The principle of spatial locality states that memory addresses that are numerically close to each other are also physically located close to each other.","Jason uses a metaphor for this, regarding Tiger Woods. If you're talking about Tiger Woods, you're probably also going to talk about things like golf, holes in one, the Official World Golf Rankting, etc. Memory addresses work in a similar way; if the CPU requests the word in address 6000, it's also likely to request word 6001 soon."]},{"l":"Principle of Temporal Locality","p":["The principle of spatial locality states that words requested now are likely to be requested soon.","Continuing the Tiger Woods metaphor, if you mention Tiger Woods, you're likely to mention him again. Storing a requested word in a cache means the CPU doesn't have to fetch it from main memory again if it rerequests it."]},{"l":"Interpreters","p":["An interpreter is any software program (aka a virtual machine) that FDEs the instructions of another program. The output of this is another program that is simpler to run. Interpreters are cheaper than having hardware run the original (more complex, higher-level) program, and cheaper than having hardware do the conversion (interpretation). However, the interpretation process itself usually slows down programs."]},{"l":"Pipelining","p":["Jason's analogies:","Imagine a computer. It's pipeline is a set of multiple hardware devices that fetches, decodes, and executes instructions in parallel and in series in order to maximize instructional bandwidth. Now imagine a car assembly line. It's pipeline is a set of multiple hardware devices (or people) that builds cars in parallel and in series, in order to maximise car-creation bandwidth. Assembly lines can build cars in a way that is simpler, cheaper, and faster."]},{"l":"Latency","p":["Instructional Latency: The total time from start to finish for one instruction to be fetched, decoded, and executed. (i.e. to pass through the entire pipeline).","For example, if you have a pipeline for car manufacturing that takes 1 minute to get the car chassis, 1 minute to put the engine and other moving parts, 2 minutes to put all the doors on, 60 minutes to paint, 1 minute to put on wheels, and 1 minute to clean, the latency of the pipeline would be the sum of all these processes, 66 minutes/car.","Another example is a pipeline that has 4 stages to execute an instruction. The first stage takes 20 nanoseconds to complete, the second 15ns, third 40ns, and the last one taking 5ns. The overall latency of this pipeline would be 80ns/instruction."]},{"l":"Bandwidth","p":["Instructional Bandwidth: The number of instructions fetched, decoded, and executed per unit time (how much time it takes to finish the longest process per instruction).","Using the car example, the cars would get bottlenecked at the painting stage, resulting of a bandwith of 1 car/60 minutes.","Using the nanosecond example, the bandwidth would be 1 instruction/40ns, or 1/(the time it takes to finish the slowest stage)."]},{"i":"definition-superscalar-architecture","l":"Definition: Superscalar Architecture","p":["Adding extra hardware at the slowest stages in parallel in order to eliminate bottlenecks."]}],[{"i":"chapter-3-error-correcting-code","l":"Chapter 3: Error-Correcting Code"},{"l":"Terminology","p":["Data word- the raw data word we want to protect and store, error-free","Codeword- the data word with extra bits added for integrity","Code- a set of valid words (ex: a dictionary)","Parity- whether a number is odd or even (or 1 or 0)","Hamming Distance- the minimum amount of different bits between any two codewords of a code"]},{"l":"Error-Correcting Codes","p":["Error-correcting code consists of:","Detecting errors in code (easy)","Correcting errors in code (hard)","Okay, well, detecting a few errors is easy. But sometimes, errors are undetectable because there’s so many errors it ends up at a different, but valid, message.","For example, say you try to text someone “wanna go to the club”, but you type “wanna go to the pub” instead.","There’s been an error, a typo, but it’s undetectable, because “pub” is a valid word, despite it being a typo of “club”.","This is an unsolvable problem; you cannot correct all errors. Instead, the goal’s to make it very unlikely for a message with errors to be interpreted as valid. The more differences between valid messages, the better.","We differentiate valid messages by adding redundant bits to the data word. Adding lots of redundancy is ideal, but also becomes more inefficient the more bits you add.","Error correction is a trade-off between clarity and efficiency. To get clearer data words, we need longer codewords with lots of differences between them. More dissimilar valid words make it easier to correct errors."]},{"l":"Worst-Case Scenarios","p":["Error correction goes by probabilities. We look for the nearest valid data word for a given code word, and assume that that’s the data word the code word was transferring. If there hasn’t been that many errors while transferring the code, this works pretty well!","However, there are three unlikely, worst-case scenarios in code transferring:","A received code is halfway between two valid solutions (detectable, but impossible to fix)","A received code has been messed up enough to seem like less errors occurred than how much actually happened (detectable, but will be fixed incorrectly)","A received code has completely messed up and stumbled into becoming another valid solution (undetectable, won’t be fixed at all)"]},{"i":"example-code-a","l":"Example: Code A","p":["Imagine a code word comprised of 8 bits, two possible values for each bit, and only two valid values:","0000 0000","1111 1111","In this case, the worst scenarios would be:","0000 0000 → 0000 1111","There’s definitely an error, but the code won’t know how to decipher it. Is it 0000 0000? Or is it 1111 1111? There’s no way to tell.","0000 0000 → 0011 1111","There’s definitely an error, but the code interprets less errors than there actually are. This codeword gets wrongly corrected to 1111 1111, instead of 0000 0000.","0000 0000 → 1111 1111","The code doesn’t see an error with this, even though there is. The codeword got corrupted so much, it wrapped back around into seeming like a different, but valid, codeword."]},{"i":"example-code-b","l":"Example: Code B","p":["Now, imagine a code comprised of 8 bits, two possible values for each bit, and only two INvalid values:","0000 0000","1111 1111","Every other combination of bits is valid in this code.","This code is very bad because it’s nearly impossible to figure out if there’s an error. It has zero correctability. If you looked at any valid codeword, say, 0101 1101, you wouldn’t be able to tell if an error occurred or not. The sender might have wanted to send 0001 1101 instead, but the recipient wouldn’t know!","Code A wasn’t space efficient, but offered clarity. Code B was very space efficient, but did not offer clarity."]},{"l":"Hamming Distance","p":["The Hamming Distance of a code is the minimum distance between any 2 valid words in that code. In Code A, the Hamming Distance is 8 bits, as there are 8 bits of difference between the two codewords.","Ex: Look at this 6-bit code with three valid words.","000 000","000 011","111 111 The distance between the latter two code words is 2 bits. Therefore, this code has a Hamming Distance of 2.","A code with Hamming Distance of h bits can:","Detect all errors consisting of up to h - 1 bits","At h-bit errors, the codeword may seem valid (see: worst-case scenario #3)","Correct all errors consisting of up to h/2 - 1 bits","At h/2 bits, it may be unclear as to which valid solution the codeword was supposed to be (see: worst-case scenario #2)","Big Hamming Distance = large gap between valid codewords = good."]},{"l":"Hamming Code","p":["Hamming code takes in a data word, and inserts parity bits on every power of two to transform it into a codeword.","Parity bits set the parity of their respective group of bits, by setting themselves to 0 or 1.","Generally, when you create Hamming code, you want the parity of each parity bit to be even.","If you want odd parity, just flip the parity bits."]},{"i":"parity-bit-groups","l":"Parity Bit \"Groups\"","p":["0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 …","0 0 0 1 1 1 1 0 0 0 0 1 1 1 1 0 …","0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 …","1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 …","1010 1100","And there you have your codeword!","Examining bit 1: __1_ 010_ 1100↑-↑- ↑-↑- ↑-↑---1- 0-0- 1-0- Parity is already even --> bit 1 is 0","Final codeword: 0111 0100 1100","Flip the intersection of all groups whose parity bits aren’t correct","Hamming code detects errors by having the parity of each data word bit covered by at least two parity bits. That way, errors can be narrowed down based on which parity bits don’t match their groups.","Hamming code is not that good of a code. It can only detect and correct a single bit error. Hamming code can’t correct multi-bit errors, and sometimes, it can’t even detect them either.","If the parity of a parity bit doesn’t align with the parity of its group, that means either:","Inserting at bit 1: _101 0110 0 Inserting at bit 2: __10 1011 00 Inserting at bit 4: __1_ 0101 100 Inserting at bit 8: __1_ 010_ 1100","Inserting at bit 2: 0_1_ 010_ 1100-↑↑- -↑↑- -↑↑---1- -10- -10- Parity is odd --> bit 2 becomes 1 to make it even","Inserting at bit 4: 011_ 010_ 1100---↑ ↑↑↑- ---↑---- 010- ---0 Parity is odd --> bit 4 becomes 1 to make it even","Inserting at bit 8: 0111 010_ 1100---- ---↑ ↑↑↑↑---- ---- 1100 Parity is even --> bit 8 is 0","Next, examine the groups for each parity bit and set the parity for each group to be EVEN.","Parity bits each check the parity of a certain \"group\" of bits in a codeword.","Remove all the parity bits","Say we have a data word of 0110 1100, and we want to encode it with Hamming code, with an EVEN parity.","The first step to transform this into Hamming code is to insert spots for parity bits on bits 1, 2, 4, 8, etc. Every power of two.","The most likely statement is that there’s an error in that parity bit’s group. It’s not impossible that the parity bits are wrong, but it’s less likely.","The parity at bit 1 checks the following bits in a given codeword sequence:","The parity at bit 2 checks:","The parity at bit 4 checks:","The parity at bit 8 checks:","There’s an error in that parity bit’s group","There’s an error with several parity bits","TO DO: Make an example of this I don't feel like it rn though","To recover the original data word from Hamming code:"]}],[{"i":"chapter-4-mean-memory-access-time-and-hard-drive-disks","l":"Chapter 4: Mean Memory Access Time and Hard Drive Disks"},{"l":"Terminology","p":["Cylinder- A stack of the same tracks on different platters","Disk head (aka read-write head)- A component that uses induction to either read or write bits from a platter","Footer(no formal name, usually just called ECC) - a portion of redundant data after the payload in a sector, used to hold error-correcting code","Hard Disk Drive (HDD)- a drive consisting of platters that store data","Header(formal name is preamble) - a portion of redundant data before the payload in a sector, used to synchronize the read/write head","Hit- when a cache has the CPU's requested word Miss- when a cache doesn't have the CPU's requested word Hit Rate- The percentage of hits from a cache, over total requests Miss Rate- The percentage of misses from a cache, over total requests","Intersector gap- a gap between adjacent sectors","Mean Memory Access Time (MMAT)- the average time it takes for a fetch request to complete, controlled by the hit/miss rate of the cache","Platter- a magnetic disk that stores tracks of data in a hard drive","Rotation time- revolutions of a platter per unit of time","Rotational latency- the time it takes for the desired sector to rotate to the read/write head","Sector- a fixed-length section (slice) of a track","Seek time- the time it takes for the read/write heads to move to the desired track","Seek- a movement of the read/write head to the correct radial position for the track it wants to read/write to","Track- a circular ring of bits on a platter","Tracks are concentric within a platter"]},{"l":"Mean Memory Access Time","p":["Mean memory access time is the average time it takes to access a given word (mean as in average).","Every fetch request is intercepted by the cache, whose goal is to save time by already storing the requested word.","Ideally, the cache has a very high hit rate (percentage of total time saves over total requests). However, the cache has to update every now and then - spatial locality doesn’t last forever.","For example, if you're running a completely new program, and the CPU requests a completely new word, the cache isn't going to have that in its memory. It always has to miss at least once.","Good quiz question - you can’t have a 100% hit rate!","To calculate mean memory access time, you're going to need three things:","The time it takes to access the cache(s)","The time it takes to access main memory","The hit rate of the cache(s) (or, the miss rate)","If you have multiple layers of cache, you'll need to know the time to access all of those levels, as well as all their hit rates."]},{"l":"MMAT Formulas","p":["The cache intercepts every fetch request by the CPU, and therefore needs to be accounted for for each fetch request.","If you have multiple layers of cache, this only applies to the first layer.","Say we had:","2 levels of caches","a L1 cache access time of 1 µs","a L2 cache access time of 4 µs","a main memory access time of 60 µs","16 hits and 48 misses from the L1 cache","16 hits and 32 misses from the L2 cache","Using the first formula:"]},{"l":"Hard-Disk Drives","p":["(Side note: it is a very bad idea to even just open hard drives up! They may not work again!)","(The geometrical sectors are the \"slices\" we've been talking about.)","(You'll notice there’s a lot of redundant data in sectors for formatting. Companies count that data as storable in the drive in the packaging. This is why you always have less storage than you bought.)","A diagram of a platter. Taken from Wikipedia. The legend for the platter. Taken from Wikipedia.","A diagram of the read-write head reading two sectors.","A hard disk drive is a storage component on your computer that stores data on aluminum platters that constantly spin.","A hard disk drive with two double-sided platters.","Data doesn’t have to be stored consecutively, though! (Quiz question)","Drives can read and write data from these platters using a read-write head by either:","Each platter has thousands of tracks that vertically align on each platter (track 0 of one platter is directly above/below track 0 of every other platter). Each track is also evenly split into multiple sectors- “slices” of tracks that serve to split tracks into specific sections.","Footers(no formal name, but contains error-correcting code to make sure data is stored correctly)","Hard disk drives usually have multiple platters on them, and each platter has its own read-write head. Every read-write head is physically joined together. Each platter's also usually double-sided, and spins synchronously with the other platters.","having a current induced from that platter's magnetic charge (reading)","Headers(officially called preamble, used to synchronize the read/write head before reading)","Intersector gaps between adjacent sectors","Platters don’t actually store data themselves, instead they’re split into tracks- thin, concentric rings on a platter that store data.","Platters spin really fast (usually 7200 RPM for low-end laptops, 120 RPS, 8.3 ms/revolution)","Sector 0 of track 0, sector 0 of track 1, sector 0 of track 2, … are all part of the same “slice” of a track","Sectors are labeled sector 0, sector 1, sector 2, sector 3… in the direction that the platter spins","Sectors are read from preamble to ECC.","Sectors contain:","sending an electric charge through that head and inducing a charge onto the platter (writing)","The actual data of that sectors - usually 512 bytes' worth","Tracks are labeled track 0, track 1, track 2, track 3… from outside ring to inside ring"]},{"l":"Seeking and Reading","p":["When the HDD wants to read from a sector, it has to seek that data. A seek is the movement of the read-write head to the specific track ring it wants to read from.","The seek time is the time it takes for the read/write heads to move to the desired track.","During any given seek, the read-write head could be hovering over any specific track ring:","The best case scenario is that it’s exactly where it wants to be (in which case, there's no seek delay).","The worst case scenario is that it’s on, say, track 0, when it wants to search track 9,999. Since it's essentially random where the head is, the average seek time is (the worst case scenario delay) / 2.","After it reaches that track, it then has to wait for the platter to rotate to the sector it wants to read from. The rotational latency is the time it takes for the desired sector to rotate to the read-write head.","The average rotational latency is half of a rotation, since it’s spinning so fast it’s essentially random how long the heads wait.","Side note, you'll notice how seeks and rotation are both physical movements. This is bad, as not only is it slow compared to digital drives, but many things can go wrong physically."]},{"l":"Cylinders","p":["Cylinders are stacks of aligned tracks. Say there's 10,000 tracks on four platters total. This means that there would be 10,000 cylinders, each with four tracks.","Data we want is stored on a sector, on a track, on a platter.","Each address on a HDD is three-dimensional!"]},{"l":"Lecture Question","p":["\\20. How long does it take to read a disk with 10,000 cylinders, each containing four tracks of 2048 sectors? First, all the sectors of track 0 are to be read starting at sector 0, then all the sectors of track 1 starting at sector 0, and so on. The rotation time is 10 msec, and a seek takes 1 msec between adjacent cylinders and 20 msec for the worst case. Switching between tracks of a cylinder can be done instantaneously.","10,000 cylinders","And, since we just ended on sector 2047 in platter 0, the next sector's the exact one we're looking for - no rotational delay either!","Each cylinder has four tracks, meaning the disk has four platters","Each track has 2048 sectors","Information we have:","Instructions of reading a disk:","Read sector 0-sector 2047 of track 0, platter 0","Read sector 0-sector 2047 of track 0, platter 0 Total time: 15 + 10 ms (time for one full rotation, and therefore one full reading of the track)","Read sector 0-sector 2047 of track 0, platter 1 Total time: 15 + 2(10) ms (Another full spin)","Read sector 0-sector 2047 of track 1, platters 0-3 Total time: 15 + 2(40) + 10 ms (another full reading, another 40 ms)","Read sector 0-sector 2047 of track 2, platters 0-3 Total time: 15 + 3(40) + 2(10) ms Total time: 10 + 5 + 3(40) + 2(10) ms Total time: 5 + 3(40) + 3(10) ms Total time: 5 + 3(40 + 10) ms (done purely to make grouping easier)","Repeat for platters 1, 2, and 3","Repeat for track 0, platter 2 and track 0, platter 3 Total time: 15 + 4(10) ms (Four full rotations total, since there are four platters)","Repeat for tracks 4-9,999 Total time: 5 + 10,000(40 + 10) ms Total time: 5 + 10,000(50) ms Total time: 500,005 ms Total time: 500.005 s","Repeat process for every track","Seek track 0, platter 0 (move the read-write head)","Seek track 0, platter 0 Total time: 10 ms (average seek time)","Seek track 1, platter 0","Seek track 1, platter 0 Total time: 15 + 40 + 1 ms (\"Best case\", 1 ms delay)","Seek track 2, platter 0 and wait for sector 0 Total time: 15 + 2(40) + 2(10) ms","Since it's an adjacent track, the (almost) best case scenario of a 1 ms delay takes place","Since we've already spent 1 ms seeking, though, we only have to account for 9 more ms of delay.","So when we move to track 1, sector 0 of track 1 will have already rotated by; we have to wait the whole 10 ms for it to come back around.","Switch to track 0, platter 1 Total time: 15 + 10 ms (No added time - switch is instantaneous)","Takes one entire spin of the platter","The movement to the other platters are instantaneous - all the read-write heads are joined together, so they've already moved to track 0. We don't have to seek again.","Wait for sector 0 of track 0, platter 0","Wait for sector 0 of track 1","Wait for sector 0, track 0, platter 0 Total time: 10 + 5 ms (average rotational latency)","Wait for sector 0, track 0, platter 1 Total time: 15 + 10 ms (No added time - we're already at sector 0)","Wait for sector 0, track 1, platter 0 Total time: 15 + 40 + 1 + 9 ms (Worst case, (10 - 1) = 9 ms delay)","Waiting times may be removed on the quiz!","You may be tempted to think about the average rotational delay. However, we already know what sector we're on; we just finished reading sector 2047."]}],[{"i":"week-5-memory-chips-and-logic-circuits","l":"Week 5: Memory Chips and Logic Circuits"},{"l":"Terminology","p":["Latch- A component that can write and store binary states","SR Latch(aka Set/Reset Latch) - A latch with two inputs; set and reset","Feedback- When the output of a circuit is fed back into the circuit as input","D Latch(aka Data Latch) - A latch with a single input; data","Enable- An input whose purpose is to allow or deny the passing through of another input","Rising-Edge Trigger(aka Pulse Generator) - A component that generates a pulse","Flip-Flop- A component that can write and store binary states, using a clock","Combinational Circuit- circuits where outputs are completely determined by the current inputs","Sequential Circuit- circuits where outputs are determined by the current inputs and past inputs","Multiplexer- A component that takes in n inputs and has a single 1-bit output","Decoder- A component that takes in a n inputs and outputs 1 on one of 2^n lines","Memory Chip(aka Register Set) - A component made of several flip-flops that stores several bits","ALU(aka Arithmetic Logic Unit) - A component that can perform several operations on two operands","Bit Shifter- A component that shifts an n-bit input"]},{"l":"Storing and Writing Memory","p":["Storing and writing memory is hard. We need to do three things in order to have a functioning memory chip:","Set bits","Reset bits","Store bits","Computer engineers went through four designs until we landed on one that was good:","SR latches","Unclocked D latches","Clocked D latches","Flip-flops"]},{"l":"SR Latch","p":["!!","!Q","“Set” ( S) sets Q = 1. “Reset” ( R) sets Q = 0. Setting neither S or R to 1 keeps Q as its current value.","\\overline Q","0","1","A latch is a circuit that alters its output every time its input changes, like most electronic circuits we’ve seen so far (in COMP 1113). An SR latch(or a Set/Reset Latch) is the first step to creating memory. SR latches involve two inputs and two outputs: Inputs:","As soon as either S or R stop sending a 1, Q will jump to either 1 or 0, meaning the circuit is nondeterministic","Feeding those outputs back in is what creates that memory","Imagine a light bulb. Can be turned on, can be turned off, can be left alone. It CAN’T, however, be turned both on and off at the same time. This would cause a problem. We want to make sure only one state can be on at a time.","In order to store memory, you need to be able to store previous outputs","Memory bit (or Q)","Outputs:","Q","Q should NEVER be equal to its complement, as they're supposed to be opposites","Q’s complement (\\overline Q, part of the circuit, but generally not used)","R","reset bits, and","Reset line (or R)","S","set bits,","Set line (or S)","SR latches can","store bits.","The \"set\" line of an SR latch sets the memory bit ( Q) to 1. The \"reset\" line of an SR latch re sets Q to 0.","The design and states of a NOR latch. A truth table of a NOR gate is also shown.","The only stable state in this situation is Q = \\overline Q = 0. This is not good, for two reasons:","This circuit contains feedback- an output being routed back into the circuit as inputs.","We have everything we need to create memory! However, you'll notice the truth table is missing a row. What if we set BOTH S and R to 1, at the same time?"]},{"l":"D Latch","p":["\\overline Q","0","1","A D latch (data latch) does just that. It features only one input, which sets Q to either 0 or 1 based on the input line.","D latches can only","Image of the two states of a D latch circuit.","Only one input:","Q","Q always changes whenever S changes. In order to store memory, we need to be able to freeze reading from the input.","reset bits.","S","Same outputs as before:","Set ( S)","set bits, and","The easiest way to make sure only one state can be active at a time is to eliminate any invalid inputs. The SR latch's invalid input was when S = R = 1. We can eliminate that by setting the reset line to be the complement of the set line.","This is a fix to the S/R latch; it makes it impossible for S and R to both equal 1. However, S and R can’t both equal 0 either - meaning this circuit can’t hold memory."]},{"l":"Clocked D Latch","p":["(By the way, it's important to distinguish clock lines from data input lines. Data input lines send data into a circuit. Clock lines enable data to be sent into a circuit.)","0","1","Adding another input means we can store memory again! Whenever the clock is 0, data writing freezes, and the state of Q is stored. Whenever it's 1, Q reads the value from S and sets it as its new value.","CLK","Clock ( CLK)","Clocked D latches can","Image of a clocked D latch.","Inputs:","Now, clocked D latches work fine, but the “problem” is they can't be scaled up without worrying about synchronization - if we want to use multiple clocked D latches in memory, they all have to operate at the same time. Good thing we have a thing for that!","Outputs:","Q","reset bits, and","S","set bits,","store bits.","We accomplish input freezing with clock lines. As a reminder, clocks are anything that can be turned on and off. Clock lines are used to affect input lines based on if they're on or off."]},{"i":"rising-edge-triggers-pulse-generators","l":"Rising-Edge Triggers (Pulse Generators)","p":["0","1","a","A NOT gate into an AND gate might look stupid. A * \\overline A = 0, after all. While this is still true, there's a very short delay between the inputs of a logic gate and the output.","A rising-edge trigger(or pulse generator) creates a short, but very clear pulse. It generates pulses by taking advantage of how NOT gates function.","An image of a pulse generator circuit.","b = \\overline a","c = a","d = b * c","Hold on this'll make sense if you look at it first","It's called a rising-edge trigger because, well, it triggers whenever there's a rising edge.","Sampling the state of a data line","Say you're sending a 1 through a NOT gate. There's going to be a very small, but existent delay between sending in that 1 and getting a 0 from the output. This circuit takes advantage of that delay. Check the timing in the figure.","Stages","Synchronizing the clocks of several clocked D latches","The clocks in clocked D latches shouldn’t be going off on their own; they should all be on/off at the same time. We can do that by connecting all of them to a single pulse generator.","We can use this pulse for:"]},{"l":"Flip-Flop","p":["A flip-flop is a circuit that alters its output whenever its clock line is set to 1. This is in contrast to latches, which always altered their output whenever the data input changed.","A D flip-flop(or data flip-flop) is a combination of a clocked D latch and a pulse generator.","Image of a D flip-flop circuit.","Because of the AND gate combining the data line and the clock, the data line can only change the stored bit when the clock pin outputs a 1. This lets us store bits!","One potential concern is that the data pin may change while the clock is inputting 1. But as long as the generated pulse is short enough, the window for the data to change should be short enough to where that isn't an issue.","If you want to store multiple bits, you can use several D flip-flops at once and connect them all to a single pulse generator. This synchronizes all of them.","Image of a memory register comprised of multiple flip-flops.","Each bit is written to on the rising edge of the clock. The pulse generator puts 1 into all 8 AND gates, and the data lines can write to the latches. When the pulse generator inputs 0, the D latches can’t write data, and all four bits are “frozen” as memory."]},{"l":"Multiplexers","p":["1 output","2^n inputs","A combinational circuit is a circuit whose output SOLELY relies on its current combination of inputs, and NOT on any past inputs.","For programming Boolean logic, each control line is connected to a variable in the logic, and each data input is connected to either ground (logical 0) or power ( V_cc, logical 1), based on the truth table of the logic. This means that whenever a specific combination of the control signals connects to an AND gate with a data input already outputting 1, it'll automatically pass through to the OR gate, and the multiplexer will output 1.","For selecting data input lines, each input line is connected to a separate data source, and the control lines determine which input line to send through. Jason uses a talent show analogy; imagine a talent show with 2n contestants, n judges, and 1 contestant to be the winner. The judges' decisions decide which contestant to be the winner.","If you want to send a different input line through the multiplexer, simply change the control lines to select the right one.","Image of a multiplexer circuit. This one has 3 control lines and 2^3 = 8 inputs.","Multiplexers are combinational circuits:","Multiplexers are components that take in 2^n input lines, and decide which line to output based on the combination of n control lines.","Multiplexers are used for:","Multiplexers consist of several AND gates and a single OR gate. Any AND gate that outputs a 1 will make the OR gate output a 1. Each AND gate connects a single data input and a unique combination of the control signals. The control signals basically encode an n-bit number into each AND gate, and whatever n-bit number the control signal equals is which AND gate is selected.","Multiplexers have:","n control signals","Only one AND gate can be selected at a time.","Programmable Boolean logic (how we use them)","Selecting a specific data input line (not how we use them)","The inverse is a sequential circuit, where the output depends not just on the current inputs, but on past inputs too."]},{"l":"Boolean Logic with Multiplexers","p":["0","1","A","A blue light goes on if the water stream is:","A green light goes on if the water stream is:","A red light goes on if the water stream is:","An image of a multiplexer schematic, as well as that same schematic representing the truth table.","As there are two outputs, we'll need three multiplexers.","B","Blue","C","C_{out}","Ex: draw a multiplexer implementation of the following problem:","For example, rows $0, 1, 2, and 4 all equal 0, so we connect data inputs D_0, D_1, D_2, and D_4 all to ground. Rows $3, 5, 6, and 7 all equal 1, so we connect data inputs D_0, D_1, D_2, and D_4 all to power.","Green","If you want to create a circuit with multiplexers, you’ll need a circuit with 1 multiplexer for each output. For example, let's look at a 1-bit half-adder.","Input","Let's pull up a truth table.","M","Output","Red","Sum","This truth table has three variables, and eight possible combinations. For each combination that equals a 0 in the truth table, we can set that respective data input to 0. For each combination that equals a 1 in the truth table, we can set that respective data input to 1.","too cold OR","too high AND","too hot","too hot AND","too low","too pressurized","Water high","Water hot","Water pressurized","We'll need three multiplexers for three outputs, and connect the each data line to ground/power according to the truth table. I'd draw it out, but I don't feel like it."]},{"l":"Decoders","p":["A decoder is a circuit that decodes an n bits of input and outputs a single 1 in one of 2^n data lines accordingly. Like multiplexers, decoders are combinational circuits.","Decoders have:","One n-bit input","2^n outputs","A decoder circuit.","Each combination of the n-bit input is connected to an AND gate, leading to an output line. This means there's 2^n AND gates. The decoder selects an output based on the input."]},{"l":"Memory Chips","p":["0","1","2","2 address lines( A_0, A_1)","2^2= 4 combinations, one for each word","3","3 data input lines( I_0, I_1, I_2)","A 4x3 memory chip.","A buffer has three states:","A Chip Select( CS) line","A Read( RD) line","A_0","A_1","An Output Enable( OE) line","At least, if that word address is selected","Buffers generally look like NOT gates but without the circle","C","CK- Clock","D","D- Data","Data can only be outputted from this chip if the CS, RD, and OE lines all send 1","Data can only be written to this chip if the CS line sends 1 AND the RD line sends 0","Data is written to a word all at once - you can’t change individual bits","Depending on which combination they are, that specific word will be accessed","Each input lines’ output will be stored onto the bit when the clock input is on","If the control line sends high, the output is the data line","If the control line sends low, the buffer doesn't send any output - like that component's been cut from the circuit","It holds four 3-bit words, each row being a 3-bit word. Each “ D Q CK” box in the diagram is a D flip-flop. As a reminder:","Nothing","Nothing (no output)","Q","Q- Output/Memory","Represents if the current chip is being read from","Represents if the current chip is being selected","Represents if the output from this chip is being read","Selected Word","This is a 4x3 memory chip (or register set).","Tri-state buffers have two inputs (a data line and a control line)","Tri-state noninverting buffers","Used in conjunction with multiple chips - you need to signify you're only sending signals to a specific chip when all the clocks are synchronized between them","When the clock is 0, Q doesn't change","When the clock is 1, Q becomes the value of the data line","You'll also notice inputs specific to memory chips:"]},{"l":"Memory Chip Sample Quiz Questions","p":["A_0, A_1- 00 (Selecting address 00_2- address 0_{10}- word 0)","A_0, A_1- 00 (Selecting address 01_2- address 1_{10}- word 1)","A_0, A_1- 11(Selecting address 11_2- address 3_{10}- word 3)","CS - 1 (We want to select this chip)","CS- 1 (We want to select this chip)","CS- 1(We want to select this chip)","I_0, I_1, I_2- 001(writing 001 to the selected address)","I_0, I_1, I_2- 110 (writing 110 to the selected address)","I_0, I_1, I_2- N/A (we’re not writing; whatever this is set to is irrelevant)","OE - N/A (We don’t need the output; whatever this is set to is irrelevant)","OE- 1 (We need output in order to read from this chip)","OE- N/A (We don’t need the output; whatever this is set to is irrelevant)","RD - 0 (We’re not reading from this chip)","RD- 0(We’re not reading from this chip)","RD- 1 (We’re reading from this chip)","What are all the input/output values required to read word 0 of a 4x3 memory chip?","What are all the input/output values required to write 001 to word 3 of a 4x3 memory chip?","What are all the input/output values required to write 110 to word 1 of a 4x3 memory chip?"]},{"i":"arithmetic-logic-units-alus","l":"Arithmetic Logic Units (ALUs)","p":["\\overline B(negation)","0","1","A","A + B + C_{in}(full addition - two bits and a carry in)","A + B(OR)","A 1-bit ALU also contains:","A 1-bit ALU consists of six input lines:","A decoder","A full adder","A logical unit","AB(AND)","Adds A, B, and C_{in} together, if the ALU's doing full addition","An arithmetic logic unit(or an ALU) is a component that takes in three inputs ( A, B, C_{in}) and performs one of four operations on them:","AND","B","C_{in}(carry in)","C_{out}(carry out, for full addition)","Contains the AND, OR, and NOT gates, each output of which is inputted to separate AND gates","Diagram of a 1-bit ALU.","EN_A- Enable A (enables A input)","EN_B- Enable B (enables B input)","Enabled operation","F_0 and F_1 as input - they decide which operation (AND, OR, NOT, Addition) to enable","F_0 Value","F_1 Value","Full adder","INV_A- Invert A (inverts A input)","NOT","OR","Output lines","Q(output) (I'm not actually sure if it's signified with Q, but like, it makes sense.)","The other input of each AND gate is the enable lines from the decoder"]},{"l":"ALU Sample Quiz Questions","p":["A- 0(first operand is 0)","A- 1(first operand is 1)","A- N/A (using the NOT gate only uses the B input)","B- 1(NOT operand is 1)","B- 1(second operand is 0)","B- 1(second operand is 1)","C_{in}- 0(doing full addition; carry-in is 0)","C_{in}- N/A (not doing full addition; carry-in is irrelevant)","C_{out}- 1( 1 + 1 + 0 = 10_2- carry out is 1)","C_{out}- N/A (not doing full addition; carry-out is irrelevant)","EN_A- 0(we aren’t inputting A)","EN_A- 1(we’re inputting A)","EN_B- 1(we’re inputting B)","F_0, F_1- 00(enables AND gate)","F_0, F_1- 01 (enables OR)","F_0, F_1- 10 (enables full adder)","F_0, F_1- 10 (enables NOT gate)","INV_A- 0(we aren’t inverting A)","INV_A- N/A (we aren’t inputting A)","Q- 0( 0 * 1 = 0)","Q- 0( 0 + 0 = 0)","Q- 0( 1 + 1 + 0 = 10_2- output is 0)","Q- 0(\\overline 1 = 0)","What are all the input/output values required to perform the operation 0 AND 1?","What are all the input/output values required to perform the operation 0 or 0?","What are all the input/output values required to perform the operation 1 + 1 + 0?","What are all the input/output values required to perform the operation NOT 1?"]},{"l":"Bit Shifters","p":["A bit shifter is a component that shifts bits.","Say we’re shifting 1101 one bit to the left.","The result is 1010.","Shifting n bits to the left is similar to multiplying by 2n","Shifting n bits to the right is similar to dividing by 2n","This is what a bit shifter looks like:","Schematic of a bit shifter.","Each D(data) line is connected to two AND gates; one AND gate connects to the output bit to the left of it and the other connects to the output bit to the right of it.","Ex: D_2 connects to S_1 and S_3","Ex: D_4 connects to S_3 and S_5","The AND gates enable that shift direction based on the C(control) line’s parity ( 0= left, 1= right).","Each S(shift) line has two D lines connected to it (ex: S_3 is connected to D_2 and D_4), the D lines are sent into an OR gate before outputting. What's nice is that only one of these inputs will be active at a time:","If we’re shifting left, D_4 connects to S_3 and D_2 connects to S_1 instead of D_3.","If we’re shifting right, D_2 connects to S_3 and D_4 connects to S_5 instead of D_3.","Jason didn't provide any questions on bit shifting in the videos."]}],[{"i":"#","p":["How long does memory have to fetch the word from when address is stable?"]},{"i":"week-6-synchronous-bus","l":"Week 6: Synchronous Bus"},{"l":"Terminologies","p":["T_{n}: clock cycles","T_{AD}: how long from the beginning to when address is stable","MREQ: memory request is asserted. MREQ requires 2 conditions:","(a): T_{ML} time has passed since address is stable","(b): T_{M} time has passed since the falling edge of the first cycle. Memory request is assered when both(a) and (b) are met.","T_{DS}: how long data must be ready before it can be read"]},{"l":"How it works","p":["You actually don't need to look at the diagram, you just need to use the numbers given. (Although the diagram may help refresh your memory of the formulas.)","You will be given the bus frequency, from which you can calculate the duration of a cycle. The total time from the beginning of the diagram to when memory is read is always (1.5 + wait) cycles. For example, if you're know there are 3 wait cycles, the total time is 4.5 cycles."]},{"i":"how-long-does-memory-have-to-fetch-the-word-from-when-address-is-stable","l":"How long does memory have to fetch the word from when address is stable?","p":["Steps:","Total = (1.5 + wait) cycles. Given the bus frequency, convert this to nanoseconds (or whatever applicable unit of time, but it's usually ns).","Address is stable after T_{AD}","Data must be ready T_{DS} before it's read.","Answer: Total time - T_{AD}- T_{DS}"]},{"i":"how-long-does-memory-have-to-fetch-the-word-from-when-memory-request-is-asserted","l":"How long does memory have to fetch the word from when memory request is asserted?","p":["Steps:","Find the total time (same as above).","Find how long from the beginning to when memory request is asserted.","MREQ requires 2 conditions: (a) T_{ML} has passed since address is stable, and (b) T_{M} has passes since the falling edge of the first cycle.","(a) = T_{AD} + T_{ML}","(b) = duration of half a cycle + T_{M}","Therefore, T_{MREQ}\\ =\\ \\text{max}(T_{AD} + T_{ML}, \\text{ duration of half a cycle} + T_{M})(max because both conditions must be satisfied).","Data must be ready T_{DS} before it's read.","Answer: Total time - T_{MREQ}- T_{DS}"]},{"l":"Practice problem","p":["Given:","There is one wait state.","Bus frequency is 400 MHz","T_{AD} = 1ns","T_{ML} = 2ns","T_{M} = 3ns","T_{DS} = 5ns"]},{"i":"how-long-does-memory-have-to-fetch-the-word-from-when-address-is-stable-1","l":"How long does memory have to fetch the word from when address is stable?","p":["400 MHz frequency ==> 25 ns/cycle.","1 wait state ==> total time is 2.5 cycles = 2.5(25) = 62.5 ns.","Answer: Total time - T_{AD}- T_{DS}= 62.5 - 1 - 5 = 56.5 ns."]},{"i":"how-long-does-memory-have-to-fetch-the-word-from-when-memory-request-is-asserted-1","l":"How long does memory have to fetch the word from when memory request is asserted?","p":["Calculate how long from the beginining to when memory request is asserted ( T_{MREQ}):","(a) = T_{AD} + T_{ML} = 3ns","(b) = duration of half a cycle + T_{M} = 25/2 + 3 = 15.5\\ ns","T_{MREQ} = \\text{max}(a, b) = 15.5\\ ns","Answer: Total time - T_{MREQ}- T_{DS}= 62.5 - 15.5 - 5 = 42 ns."]}],[{"l":"Gallery","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]}],[{"l":"Projects 2","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!"]},{"i":"badge-variant-secondary-text-unknown","l":":icon-question: | [!badge variant=\"secondary\" text=\"UNKNOWN\"]","p":["...what?"]},{"l":"Course Description"}],[{"l":"Placeholder","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Reprehenderit amet duis culpa ut. Occaecat irure ea sint id adipisicing reprehenderit et est enim sunt. Anim ullamco ex aliqua aute esse magna. Esse ipsum irure minim culpa enim ex occaecat voluptate Lorem tempor deserunt veniam ea eu. Voluptate commodo adipisicing nisi consectetur cupidatat est. Anim commodo consequat veniam laboris irure adipisicing cillum ullamco reprehenderit irure dolor nulla."]}],[{"l":"Placeholder","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Reprehenderit amet duis culpa ut. Occaecat irure ea sint id adipisicing reprehenderit et est enim sunt. Anim ullamco ex aliqua aute esse magna. Esse ipsum irure minim culpa enim ex occaecat voluptate Lorem tempor deserunt veniam ea eu. Voluptate commodo adipisicing nisi consectetur cupidatat est. Anim commodo consequat veniam laboris irure adipisicing cillum ullamco reprehenderit irure dolor nulla."]}],[{"l":"Placeholder","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Reprehenderit amet duis culpa ut. Occaecat irure ea sint id adipisicing reprehenderit et est enim sunt. Anim ullamco ex aliqua aute esse magna. Esse ipsum irure minim culpa enim ex occaecat voluptate Lorem tempor deserunt veniam ea eu. Voluptate commodo adipisicing nisi consectetur cupidatat est. Anim commodo consequat veniam laboris irure adipisicing cillum ullamco reprehenderit irure dolor nulla."]}],[{"l":"Placeholder","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Reprehenderit amet duis culpa ut. Occaecat irure ea sint id adipisicing reprehenderit et est enim sunt. Anim ullamco ex aliqua aute esse magna. Esse ipsum irure minim culpa enim ex occaecat voluptate Lorem tempor deserunt veniam ea eu. Voluptate commodo adipisicing nisi consectetur cupidatat est. Anim commodo consequat veniam laboris irure adipisicing cillum ullamco reprehenderit irure dolor nulla."]}],[{"l":"Placeholder","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Reprehenderit amet duis culpa ut. Occaecat irure ea sint id adipisicing reprehenderit et est enim sunt. Anim ullamco ex aliqua aute esse magna. Esse ipsum irure minim culpa enim ex occaecat voluptate Lorem tempor deserunt veniam ea eu. Voluptate commodo adipisicing nisi consectetur cupidatat est. Anim commodo consequat veniam laboris irure adipisicing cillum ullamco reprehenderit irure dolor nulla."]}],[{"l":"Placeholder","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Reprehenderit amet duis culpa ut. Occaecat irure ea sint id adipisicing reprehenderit et est enim sunt. Anim ullamco ex aliqua aute esse magna. Esse ipsum irure minim culpa enim ex occaecat voluptate Lorem tempor deserunt veniam ea eu. Voluptate commodo adipisicing nisi consectetur cupidatat est. Anim commodo consequat veniam laboris irure adipisicing cillum ullamco reprehenderit irure dolor nulla."]}],[{"l":"Placeholder","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Reprehenderit amet duis culpa ut. Occaecat irure ea sint id adipisicing reprehenderit et est enim sunt. Anim ullamco ex aliqua aute esse magna. Esse ipsum irure minim culpa enim ex occaecat voluptate Lorem tempor deserunt veniam ea eu. Voluptate commodo adipisicing nisi consectetur cupidatat est. Anim commodo consequat veniam laboris irure adipisicing cillum ullamco reprehenderit irure dolor nulla."]}],[{"l":"Placeholder","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Reprehenderit amet duis culpa ut. Occaecat irure ea sint id adipisicing reprehenderit et est enim sunt. Anim ullamco ex aliqua aute esse magna. Esse ipsum irure minim culpa enim ex occaecat voluptate Lorem tempor deserunt veniam ea eu. Voluptate commodo adipisicing nisi consectetur cupidatat est. Anim commodo consequat veniam laboris irure adipisicing cillum ullamco reprehenderit irure dolor nulla."]}],[{"l":"Placeholder","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Reprehenderit amet duis culpa ut. Occaecat irure ea sint id adipisicing reprehenderit et est enim sunt. Anim ullamco ex aliqua aute esse magna. Esse ipsum irure minim culpa enim ex occaecat voluptate Lorem tempor deserunt veniam ea eu. Voluptate commodo adipisicing nisi consectetur cupidatat est. Anim commodo consequat veniam laboris irure adipisicing cillum ullamco reprehenderit irure dolor nulla."]}],[{"l":"Placeholder","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Reprehenderit amet duis culpa ut. Occaecat irure ea sint id adipisicing reprehenderit et est enim sunt. Anim ullamco ex aliqua aute esse magna. Esse ipsum irure minim culpa enim ex occaecat voluptate Lorem tempor deserunt veniam ea eu. Voluptate commodo adipisicing nisi consectetur cupidatat est. Anim commodo consequat veniam laboris irure adipisicing cillum ullamco reprehenderit irure dolor nulla."]}],[{"i":"term-5-to-8-acs-bsc","l":"Term 5 to 8: ACS (BSc)","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Reprehenderit amet duis culpa ut. Occaecat irure ea sint id adipisicing reprehenderit et est enim sunt. Anim ullamco ex aliqua aute esse magna. Esse ipsum irure minim culpa enim ex occaecat voluptate Lorem tempor deserunt veniam ea eu. Voluptate commodo adipisicing nisi consectetur cupidatat est. Anim commodo consequat veniam laboris irure adipisicing cillum ullamco reprehenderit irure dolor nulla."]}],[{"i":"term-m1-to-m4-ac-msc","l":"Term M1 to M4: AC (MSc)","p":["WIP This page is a work in progress. Feel free to help contribute by creating a pull request!","Reprehenderit amet duis culpa ut. Occaecat irure ea sint id adipisicing reprehenderit et est enim sunt. Anim ullamco ex aliqua aute esse magna. Esse ipsum irure minim culpa enim ex occaecat voluptate Lorem tempor deserunt veniam ea eu. Voluptate commodo adipisicing nisi consectetur cupidatat est. Anim commodo consequat veniam laboris irure adipisicing cillum ullamco reprehenderit irure dolor nulla."]}]]